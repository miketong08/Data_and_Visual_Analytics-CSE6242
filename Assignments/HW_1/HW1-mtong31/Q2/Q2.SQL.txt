-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE movies (
  id integer,
	name text,
  score integer
	);

CREATE TABLE cast (
	movie_id integer,
	cast_id integer,
	cast_name text
);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.separator ","
.import movie-cast.txt cast
.import movie-name-score.txt movies

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index
ON movies(score);

CREATE INDEX cast_index
ON cast(cast_id);

CREATE INDEX movie_index
ON movies(id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate average score

-- [insert your SQL statement(s) BELOW this line]

SELECT AVG(score) as average_score
FROM movies
WHERE score >= 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find poor movies

-- [insert your SQL statement(s) BELOW this line]

SELECT *
FROM
(
	SELECT *
	FROM movies
  ORDER BY score ASC
  LIMIT 5
)
ORDER BY name;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find laid back actors

-- [insert your SQL statement(s) BELOW this line]


SELECT cast_id, cast_name, count(cast_name) AS movie_count
FROM cast
GROUP BY cast_name
HAVING count(cast_name) == 2
ORDER BY cast_name ASC
LIMIT 10;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, AVG(score) as average_score
FROM
(
  SELECT movie_id, score, cast_id, id, cast_name
  FROM movies
  INNER JOIN cast ON id = movie_id
  WHERE score >= 40
)
GROUP BY cast_name
HAVING COUNT(cast_name) > 2
ORDER BY AVG(score) DESC
LIMIT 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

/*
SELECT
  movies.id AS id,
  cast_member_id1,
  cast_member_id2,
  movies.score AS score
FROM
(

  SELECT
   cast1_movie,
   cast2_movie,
   CASE WHEN cast_member_id1 < cast_member_id2 THEN cast_member_id1 else cast_member_id2 END AS cast_member_id1,
   CASE WHEN cast_member_id1 < cast_member_id2 THEN cast_member_id2 else cast_member_id1 END AS cast_member_id2
  FROM
  (
    SELECT
      cast1.movie_id AS cast1_movie,
      cast1.cast_name AS cast_member_id1,
      cast2.movie_id AS cast2_movie,
      cast2.cast_name AS cast_member_id2
    FROM cast as cast1
    INNER JOIN cast as cast2 on cast2.movie_id = cast1.movie_id
  )
  GROUP BY cast_member_id1, cast_member_id2
  HAVING cast_member_id1 != cast_member_id2
) AS temp

INNER JOIN movies on id = temp.cast1_movie;
--GROUP BY cast_member_id2
--HAVING COUNT(*) > 3 AND AVG(score) > 50;
*/

CREATE VIEW good_collaboration AS
  SELECT
    cast_member_id1,
    cast_member_id2,
    COUNT(*) AS movie_count,
    AVG(movies.score) AS average_movie_score
  FROM
  (
    SELECT
      cast1.movie_id AS cast1_movie,
      cast1.cast_id AS cast_member_id1,
      cast2.movie_id AS cast2_movie,
      cast2.cast_id AS cast_member_id2
    FROM cast as cast1
    INNER JOIN cast as cast2 ON cast2.movie_id = cast1.movie_id
      AND cast_member_id1 < cast_member_id2
  )
  INNER JOIN movies ON id = cast1_movie
  GROUP BY cast_member_id1, cast_member_id2
  HAVING COUNT(*) >= 3 AND AVG(movies.score) >= 50;

SELECT * FROM good_collaboration;

.print '~~~~~'

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

SELECT
  cast_member_id1 as cast_id,
  cast_name,
  AVG(average_movie_score) as collaboration_score
FROM
(
  SELECT
    cast_member_id1,
    cast_member_id2,
    cast_name,
    average_movie_score
  FROM good_collaboration AS gc
  INNER JOIN cast ON cast_id = cast_member_id1
)
GROUP BY cast_member_id2
ORDER BY AVG(average_movie_score) DESC
LIMIT 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

/*
CREATE TABLE movie_overview_table (
  id integer,
	name text,
  year integer,
  overview text,
  popularity decimal
	);
*/
CREATE VIRTUAL TABLE movie_overview USING fts3 (
  id integer,
	name text,
  year integer,
  overview text,
  popularity decimal);

.separator ","
.import movie-overview.txt movie_overview


-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(*) as count_overview
FROM movie_overview
WHERE overview MATCH 'fight';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT id
FROM movie_overview
WHERE overview MATCH 'love NEAR/5 story';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --
